use crate::answers::{
    ban_answer::BanAnswer, connected_answer::ChannelListAnswer, dcc_close_answer::DCCCloseAnswer,
    file_info_answer::FileInfoAnswer, file_request_answer::FileRequestAnswer,
    invite_answer::InviteAnswer, join_answer::JoinAnswer, kick_answer::KickAnswer,
    list_answer::ListAnswer, mode_answer::ModeAnswer, names_answer::NamesAnswer,
    nick_answer::NickAnswer, p2p_answer::P2PAnswer, part_answer::PartAnswer,
    privmsg_answer::PrivmsgAnswer, quit_answer::QuitAnswer, server_answer::ServerAnswer,
    start_dcc_answer::StartDCCAnswer, topic_answer::TopicAnswer, who_answer::WhoAnswer,
    who_is_answer::WhoIsAnswer,
};

#[derive(Debug, Clone)]
pub enum Answer {
    ErrMsg(String),
    PrivMsg(PrivmsgAnswer),
    Join(JoinAnswer),
    Welcome(String),
    Register(String),
    ChannelList(ChannelListAnswer),
    List(ListAnswer),
    Names(NamesAnswer),
    Quit(QuitAnswer),
    Ban(BanAnswer),
    Server(ServerAnswer),
    Part(PartAnswer),
    Topic(TopicAnswer),
    Invite(InviteAnswer),
    WhoIs(WhoIsAnswer),
    Kick(KickAnswer),
    Nick(NickAnswer),
    Mode(ModeAnswer),
    Who(WhoAnswer),
    P2PChat(P2PAnswer),
    StartDCC(StartDCCAnswer),
    FileRequest(FileRequestAnswer),
    DCClose(DCCCloseAnswer),
    FileInfo(FileInfoAnswer),
    SendError(String),
    P2PError(String),
}
/// A partir del primer campo del vector que se le pasa, se inicializa una answer que es usada en la ui para facil manejo de respuestas.
pub fn parse_answer(server_answer: Vec<String>) -> Answer {
    return match server_answer[0].as_str() {
        "PRIVMSG" => Answer::PrivMsg(PrivmsgAnswer::new(server_answer)),
        "Welcome!" => Answer::Welcome(server_answer[1].clone()),
        "REGISTER!" => Answer::Register(server_answer[1].clone()),
        "CHANNELJOINED" => Answer::Join(JoinAnswer::new(server_answer)),
        "CHANNELLIST" => Answer::ChannelList(ChannelListAnswer::new(server_answer)),
        "LIST" => Answer::List(ListAnswer::new(server_answer)),
        "NAMES" => Answer::Names(NamesAnswer::new(server_answer)),
        "QUIT" => Answer::Quit(QuitAnswer::new(server_answer)),
        "BAN" => Answer::Ban(BanAnswer::new(server_answer)),
        "SERVER" => Answer::Server(ServerAnswer::new(server_answer)),
        "PART" => Answer::Part(PartAnswer::new(server_answer)),
        "RPL_TOPIC" => Answer::Topic(TopicAnswer::new(server_answer)),
        "RPL_NOTOPIC" => Answer::Topic(TopicAnswer::new(server_answer)),
        "RPL_INVITING" => Answer::Invite(InviteAnswer::new(server_answer)),
        "WHOIS" => Answer::WhoIs(WhoIsAnswer::new(server_answer)),
        "KICK" => Answer::Kick(KickAnswer::new(server_answer)),
        "NICK" => Answer::Nick(NickAnswer::new(server_answer)),
        "MODE" => Answer::Mode(ModeAnswer::new(server_answer)),
        "WHO" => Answer::Who(WhoAnswer::new(server_answer)),
        "P2PCHAT" => Answer::P2PChat(P2PAnswer::new(server_answer)),
        "DCCCLOSE" => Answer::DCClose(DCCCloseAnswer::new(server_answer)),
        _ => Answer::ErrMsg(server_answer[0].clone()),
    };
}
